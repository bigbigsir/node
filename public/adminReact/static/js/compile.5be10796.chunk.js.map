{"version":3,"sources":["views/projects/api.ts","views/compile/index.module.scss","views/compile/index.tsx"],"names":["getProjectList","data","config","http","post","removeProject","addProject","getProjects","updateProject","module","exports","cx","classNames","bind","scss","Index","useIntl","logContent","useRef","useState","log","setLog","loading","setLoading","project","setProject","projects","setProjects","compileStatus","setCompiledStatus","token","useSelector","state","initSocketIo","url","socket","socketIo","autoConnect","reconnection","transportOptions","polling","extraHeaders","connect","on","connected","socketId","projectItem","filter","item","id","headers","cryptoJs","HmacSHA1","JSON","stringify","secret","toString","web","node","type","toLowerCase","key","_isNeedLoginName","then","success","console","error","message","reason","disconnect","useEffect","api","el","current","scrollTop","scrollHeight","className","direction","Group","onChange","e","target","value","map","name","onClick","info","icon","title","ref"],"mappings":"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","file":"static/js/compile.5be10796.chunk.js","sourcesContent":["import http from '@/api/http'\nimport { RequestApiFn } from '@/api/types'\n\n// 获取角色列表\nexport const getProjectList: RequestApiFn = (data, config) => {\n  const url: string = '/project/getProjectList'\n  return http.post(url, data, config)\n}\n\n// 获取角色列表\nexport const getProjects: RequestApiFn = (data, config) => {\n  const url: string = '/project/getProjects'\n  return http.post(url, data, config)\n}\n\n// 添加角色\nexport const addProject: RequestApiFn = (data, config) => {\n  const url: string = '/project/addProject'\n  return http.post(url, data, config)\n}\n\n// 添加角色\nexport const updateProject: RequestApiFn = (data, config) => {\n  const url: string = '/project/updateProject'\n  return http.post(url, data, config)\n}\n\n// 删除角色\nexport const removeProject: RequestApiFn = (data, config) => {\n  const url: string = '/project/removeProject'\n  return http.post(url, data, config)\n}\n\nexport default {\n  addProject,\n  getProjects,\n  updateProject,\n  removeProject,\n  getProjectList\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"compile_menu__2ywfI\",\"menu__header\":\"compile_menu__header__7qitU\",\"menu__tree-select\":\"compile_menu__tree-select__QFRCn\",\"log\":\"compile_log__20Hpu\",\"log__content\":\"compile_log__content__17vNb\",\"log__alert\":\"compile_log__alert__3g_n_\"};","import React, { useEffect, useRef, useState } from 'react'\nimport classNames from 'classnames/bind'\nimport { Button, Space, Alert, Radio, Card, message } from 'antd'\nimport { State, Token } from '@/store/types'\nimport { CloudUploadOutlined } from '@ant-design/icons'\nimport api from '@/views/projects/api.ts'\nimport http from '@/api/http'\nimport socketIo from 'socket.io-client'\nimport cryptoJs from 'crypto-js'\nimport scss from './index.module.scss'\nimport { useIntl } from 'react-intl'\nimport { useSelector } from 'react-redux'\n\nconst cx = classNames.bind(scss)\n\ninterface ProjectItem {\n  id: string\n  key: string\n  type: string\n  name: string\n  secret: string,\n  describe: string,\n  shellPath: string,\n  projectDir: string\n}\n\nconst Index: React.FC = () => {\n  const intl = useIntl()\n  const logContent = useRef<HTMLDivElement>(null)\n  const [log, setLog] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(false)\n  const [project, setProject] = useState<string>()\n  const [projects, setProjects] = useState<ProjectItem[]>([])\n  const [compileStatus, setCompiledStatus] = useState<'error' | 'success' | undefined>()\n\n  const token = useSelector<State, Token>(state => state.token)\n\n  useEffect(getProjects, [])\n  useEffect(() => {\n    const el = logContent.current\n    if (el) {\n      el.scrollTop = el.scrollHeight\n    }\n  }, [log, loading])\n\n  function getProjects() {\n    api.getProjects().then(({ success, data }) => {\n      success && setProjects(data)\n    })\n  }\n\n  function initSocketIo() {\n    const url = `${process.env.NODE_ENV === 'development' ? 'http://192.168.254.105:3003' : ''}/socket/webHooks`\n    const socket = socketIo(url, {\n      autoConnect: false,\n      reconnection: false,\n      transportOptions: {\n        polling: {\n          extraHeaders: { token }\n        }\n      }\n    })\n    socket.connect()\n    socket.on('connect', () => {\n      socket.connected && updateProject(socket.id)\n    })\n    socket.on('process_stdout', (data: any) => {\n      setLog(log => log + data)\n      console.log('process_stdout=>', data)\n    })\n    socket.on('process_stderr', (data: any) => {\n      setLog(log => log + data)\n      console.log('process_stderr=>', data)\n    })\n    socket.on('process_error', (data: any) => {\n      setLog(log => log + data)\n      console.log('process_error=>', data)\n    })\n    socket.on('process_close', (data: any) => {\n      setLog(log => log + data)\n      console.log('process_close=>', data)\n    })\n    socket.on('error', (error: any) => {\n      console.log('error=>', error)\n    })\n    socket.on('connect_error', (error: any) => {\n      setLoading(false)\n      message.error('Socket connect error')\n      console.log('connect_error=>', error)\n    })\n    socket.on('disconnect', (reason: any) => {\n      socket.disconnect()\n      console.log('disconnect=>', reason)\n    })\n  }\n\n  function updateProject(socketId: string) {\n    const projectItem = projects.filter(item => item.id === project)[0]\n    const data = {\n      _isNeedLoginName: false\n    }\n    const config = {\n      headers: {\n        'socket-id': socketId,\n        'X-Hub-Signature': 'sha1=' + cryptoJs.HmacSHA1(JSON.stringify({}), projectItem.secret).toString()\n      }\n    }\n    const updateUrl: any = {\n      web: '/webHooks/webProject/',\n      node: '/webHooks/nodeProject/'\n    }\n    const url = updateUrl[projectItem.type.toLowerCase()] + projectItem.key\n    http.post(url, data, config).then(({ success }) => {\n      setLoading(false)\n      setCompiledStatus(success ? 'success' : 'error')\n    })\n  }\n\n  function handelUpdate() {\n    if (project) {\n      setLog('')\n      setLoading(true)\n      initSocketIo()\n    } else {\n      message.info('请选择项目')\n    }\n  }\n\n  function radioOnChange(e: any) {\n    setProject(e.target.value)\n  }\n\n  return (\n    <div className={cx('menu')}>\n      <div className={cx('menu__header')}>\n        <Space direction=\"vertical\">\n          <div>\n            <h4>项目列表</h4>\n            <Radio.Group onChange={radioOnChange} value={project}>\n              {\n                projects.map(item => (\n                  <Radio value={item.id} key={item.id}>{item.name}</Radio>\n                ))\n              }\n            </Radio.Group>\n          </div>\n          <Button loading={loading} onClick={handelUpdate} type=\"primary\" icon={<CloudUploadOutlined/>}>\n            一键部署\n          </Button>\n        </Space>\n      </div>\n\n      <Space direction=\"vertical\" className={cx('menu__header')}>\n\n      </Space>\n      <div className={cx('menu__header')}>\n        <Card className={cx('log')} type=\"inner\" title=\"进度日志\">\n          <div ref={logContent} className={cx('log__content')}>\n            {\n              (loading || log) && <Alert className={cx('log__alert')} message=\"开始部署\" type=\"info\"/>\n            }\n            {log}\n            {\n              !loading && log &&\n              <Alert className={cx('log__alert')} message={compileStatus === 'success' ? '成功部署' : '部署失败'}\n                type={compileStatus}/>\n            }\n          </div>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default Index\n"],"sourceRoot":""}