{"version":3,"sources":["views/user/user.module.scss","components/RequiredTips.tsx","utils/validate.ts","views/user/register.tsx"],"names":["module","exports","Required","labelId","id","values","label","usernameReg","passwordReg","emailReg","cx","classNames","bind","scss","Register","intl","useIntl","history","useHistory","dispatch","useDispatch","useState","visible","setVisible","loading","setLoading","count","setCount","codeLoading","setCodeLoading","password","setPassword","Form","useForm","form","usernameRule","required","message","pattern","passwordRule","validator","rule","value","length","test","Promise","resolve","reject","confirmRule","getFieldValue","captchaRule","emailRule","useEffect","timer","setTimeout","clearTimeout","className","formatMessage","name","size","initialValues","username","confirm","email","captcha","captchaId","onFinish","v","emailType","signUp","then","success","onFinishFailed","errorInfo","console","log","Item","rules","maxLength","placeholder","placement","getPopupContainer","node","parentNode","content","status","statusMap","normal","exception","strokeWidth","percent","Math","floor","showInfo","Password","dependencies","visibilityToggle","gutter","span","noStyle","hidden","onClick","validateFields","getEmailCode","data","setFieldsValue","exp","disabled","type","htmlType","block","push","href"],"mappings":"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","file":"static/js/register.ceda371d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__19OoE\",\"user__content\":\"user_user__content__1JwNP\",\"user__title\":\"user_user__title__1WWu5\",\"user__lang\":\"user_user__lang__KtXQb\",\"header\":\"user_header__1sq_R\",\"header__title\":\"user_header__title__3TSxz\",\"header__logo\":\"user_header__logo__2i4Xy\",\"header__subtitle\":\"user_header__subtitle__3cazf\",\"footer\":\"user_footer__1nprT\",\"footer__copyright\":\"user_footer__copyright__1A0F4\",\"footer__links\":\"user_footer__links__13SVJ\",\"footer__link\":\"user_footer__link__245Os\",\"login__remember\":\"user_login__remember__2ZP98\",\"login__link-register\":\"user_login__link-register__B6Jbj\",\"login__captcha\":\"user_login__captcha__KEqzD\",\"register__captcha-button\":\"user_register__captcha-button__3Z3Pr\",\"register__popover-wrapper\":\"user_register__popover-wrapper__wqM1X\",\"register__popover-placeholder\":\"user_register__popover-placeholder__3SQeD\",\"register__popover-content\":\"user_register__popover-content__18QDj\",\"register__progress-color\":\"user_register__progress-color__YXnpm\",\"success\":\"user_success__2EKT4\",\"exception\":\"user_exception__3rxVR\",\"normal\":\"user_normal__3JjmY\",\"register__password-tips\":\"user_register__password-tips__3CWqd\"};","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nconst Required: React.FC<{ labelId: string }> = ({ labelId }) => {\n  return (\n    <FormattedMessage id={'required'} values={{ label: <FormattedMessage id={labelId}/> }}/>\n  )\n}\n\nexport default Required\n","export const usernameReg: RegExp = /^[0-9A-z]{6,16}$/\nexport const passwordReg = /^[\\w-*/+.~!@#$%^&()]{6,20}$/\nexport const emailReg = /^[A-z0-9]+([_.][A-z0-9]+)*@([A-z0-9-]+\\.)+[A-z]{2,6}$/\n\nexport function verifyUsername(str: string): boolean {\n  return usernameReg.test(str)\n}\n\nexport function verifyPassword(str: string): boolean {\n  return passwordReg.test(str)\n}\n\nexport function verifyEmail(str: string): boolean {\n  return emailReg.test(str)\n}\n\nexport default {\n  verifyEmail,\n  verifyUsername,\n  verifyPassword\n}\n","import React, { useEffect, useState } from 'react'\nimport { Rule } from 'antd/es/form'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport classNames from 'classnames/bind'\nimport { Row, Col, Form, Input, Button, Popover, Progress, message } from 'antd'\nimport { usernameReg, passwordReg, emailReg } from '@/utils/validate'\nimport { ResponseData, RequestData } from '@/api/types'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport Required from '@/components/RequiredTips'\nimport { signUp } from '@/store/actions/user'\nimport { getEmailCode } from '@/api/modules/common'\nimport scss from './user.module.scss'\n\nconst cx = classNames.bind(scss)\n\ninterface RegisterParams extends RequestData {\n  username: string,\n  password: string,\n  confirm: string,\n  email: string,\n  captcha: string,\n  captchaId: string,\n}\n\nconst Register: React.FC = () => {\n  const intl = useIntl()\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const [visible, setVisible] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n  const [codeLoading, setCodeLoading] = useState<boolean>(false)\n  const [password, setPassword] = useState<string>('')\n  const [form] = Form.useForm()\n  const initialValues: RegisterParams = {\n    username: '',\n    password: '',\n    confirm: '',\n    email: '',\n    captcha: '',\n    captchaId: ''\n  }\n  const usernameRule: Rule[] = [\n    {\n      required: true,\n      message: <Required labelId={'user.login.username'}/>\n    }, {\n      pattern: usernameReg,\n      message: <FormattedMessage id={'user.register.usernameReg'}/>\n    }\n  ]\n  const passwordRule: Rule[] = [\n    {\n      required: true,\n      message: <Required labelId={'user.login.password'}/>\n    },\n    {\n      validator(rule, value) {\n        setVisible(!!value)\n        setPassword(value)\n        if (value.length >= 6 && passwordReg.test(value)) {\n          return Promise.resolve()\n        }\n        // eslint-disable-next-line prefer-promise-reject-errors\n        return Promise.reject('')\n      }\n    }\n  ]\n  const confirmRule: Rule[] = [\n    {\n      required: true,\n      message: <Required labelId={'user.register.confirm'}/>\n    },\n    {\n      validator(rule, value) {\n        if (!value || form.getFieldValue('password') === value) {\n          return Promise.resolve()\n        } else {\n          // eslint-disable-next-line prefer-promise-reject-errors\n          return Promise.reject(<FormattedMessage id={'user.register.confirmTips'}/>)\n        }\n      }\n    }\n  ]\n  const captchaRule: Rule[] = [\n    {\n      required: true,\n      message: <Required labelId={'user.register.emailCode'}/>\n    },\n    {\n      validator(rule, value) {\n        if (!value || form.getFieldValue('captchaId')) {\n          return Promise.resolve()\n        } else {\n          // eslint-disable-next-line prefer-promise-reject-errors\n          return Promise.reject(<FormattedMessage id={'user.register.firstGetCode'}/>)\n        }\n      }\n    }\n  ]\n  const emailRule: Rule[] = [\n    {\n      required: true,\n      message: <Required labelId={'user.register.email'}/>\n    }, {\n      pattern: emailReg,\n      message: <FormattedMessage id={'user.register.emailReg'}/>\n    }\n  ]\n  const PopoverContent: React.FC = () => {\n    const value = password\n    const status = value.length > 10 ? 'success' : value.length >= 6 ? 'normal' : 'exception'\n    const statusMap = {\n      success: intl.formatMessage({ id: 'user.register.strength.strong' }),\n      normal: intl.formatMessage({ id: 'user.register.strength.medium' }),\n      exception: intl.formatMessage({ id: 'user.register.strength.short' })\n    }\n    return (\n      <div className={cx('register__popover-content')}>\n        <p className={cx('register__progress-color', status)}>\n          {statusMap[status]}\n        </p>\n        <Progress\n          strokeWidth={6}\n          percent={Math.floor(value.length * 100 / 11)}\n          status={status}\n          showInfo={false}\n        />\n        <p className={cx('register__password-tips')}>\n          <FormattedMessage id={'user.register.passwordReg'}/>\n        </p>\n      </div>\n    )\n  }\n\n  useEffect(countdown, [count])\n\n  function onFinish(values: RegisterParams): void {\n    values.emailType = 'signIn'\n    setLoading(true)\n    dispatch(signUp(values)).then(({ success }: ResponseData) => {\n      setLoading(false)\n      if (success) {\n        message.success(intl.formatMessage({ id: 'user.register.success' }))\n      }\n    })\n  }\n\n  function onFinishFailed(errorInfo: any): void {\n    console.log('onFinishFailed:', errorInfo)\n  }\n\n  function countdown() {\n    let timer: any = null\n    if (count <= 0) {\n      setCount(0)\n    } else {\n      timer = setTimeout(() => setCount(count - 1), 1000)\n    }\n\n    return () => clearTimeout(timer)\n  }\n\n  function getCaptcha() {\n    form.validateFields(['email']).then((values) => {\n      setCodeLoading(true)\n      values = {\n        ...values,\n        emailType: 'signIn',\n        username: form.getFieldValue('username')\n      }\n      getEmailCode(values).then(({ success, data }) => {\n        setCodeLoading(false)\n        if (success) {\n          setCount(60)\n          form.setFieldsValue({ captchaId: data.captchaId })\n          message.success(`验证码已发送到邮箱，${data.exp}分钟内有效，请注意查收`)\n          if (form.getFieldValue('captcha')) {\n            form.validateFields(['captcha']).then(() => null)\n          }\n        }\n      })\n    })\n  }\n\n  return (\n    <div className={cx('register')}>\n      <h3 className={cx('user__title')}>\n        {intl.formatMessage({ id: 'user.register.register' })}\n      </h3>\n      <Form\n        name=\"login\"\n        form={form}\n        size=\"large\"\n        initialValues={initialValues}\n        onFinish={v => onFinish(v as RegisterParams)}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item name=\"username\" rules={usernameRule}>\n          <Input maxLength={16} placeholder={intl.formatMessage({ id: 'user.login.username' })}/>\n        </Form.Item>\n        <div className={cx('register__popover-wrapper')}>\n          <Popover\n            placement=\"right\"\n            visible={visible}\n            getPopupContainer={(node) => {\n              if (node && node.parentNode) {\n                return node.parentNode as HTMLElement\n              }\n              return node\n            }}\n            content={PopoverContent}\n          >\n            <span className={cx('register__popover-placeholder')}/>\n          </Popover>\n          <Form.Item name=\"password\" rules={passwordRule}>\n            <Input.Password maxLength={20} placeholder={intl.formatMessage({ id: 'user.login.password' })}/>\n          </Form.Item>\n        </div>\n\n        <Form.Item\n          name=\"confirm\"\n          dependencies={['password']}\n          rules={confirmRule}\n        >\n          <Input.Password visibilityToggle={false} placeholder={intl.formatMessage({ id: 'user.register.confirm' })}/>\n        </Form.Item>\n        <Form.Item name=\"email\" rules={emailRule}>\n          <Input maxLength={30} placeholder={intl.formatMessage({ id: 'user.register.email' })}/>\n        </Form.Item>\n        <Form.Item>\n          <Row gutter={8}>\n            <Col span={16}>\n              <Form.Item name=\"captchaId\" noStyle>\n                <Input hidden/>\n              </Form.Item>\n              <Form.Item name=\"captcha\" dependencies={['captchaId']} rules={captchaRule} noStyle>\n                <Input maxLength={4} placeholder={intl.formatMessage({ id: 'user.register.emailCode' })}/>\n              </Form.Item>\n            </Col>\n            <Col span={8}>\n              <Button onClick={getCaptcha} disabled={count > 0} loading={codeLoading}\n                className={cx('register__captcha-button', 'monospaced-font')}>\n                {\n                  count > 0\n                    ? count + ' s'\n                    : intl.formatMessage({ id: 'user.register.getCode' })\n                }\n              </Button>\n            </Col>\n          </Row>\n        </Form.Item>\n        <Form.Item>\n          <Button loading={loading} type=\"primary\" htmlType=\"submit\" block>\n            {intl.formatMessage({ id: 'user.register.register' })}\n          </Button>\n        </Form.Item>\n      </Form>\n      <p className={cx('login__link-register')}>\n        <a onClick={() => history.push('/user/login')} href=\"javascript:void (0);\">\n          {intl.formatMessage({ id: 'user.register.login' })}\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Register\n"],"sourceRoot":""}